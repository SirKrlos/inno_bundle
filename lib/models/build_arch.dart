/// This file defines the [BuildArch] enum, which specifies the CPU architectures
/// that the app is designed to run on and, consequently, the architectures supported
/// by the installer generated by [inno_bundle].
///
/// The [BuildArch] enum includes two options:
/// - [BuildArch.x64]: Represents the standard 64-bit architecture (`x86_64`).
/// - [BuildArch.x64Compatible]: Represents a compatible 64-bit architecture (`x86_64`).
///
/// The file also provides utility methods for validating and parsing configuration
/// options:
/// - [validationError]: Validates a configuration option to ensure it matches an accepted value.
/// - [fromOption]: Converts a string configuration option into the corresponding [BuildArch] enum value.
library;

/// The CPU Architecture that the app was designed to run on,
/// and therefore the architectures that are accepted by [inno_bundle] generated installer.
enum BuildArch {
  x64("x64os", "x86_64"),
  x64Compatible("x64compatible", "x86_64");

  /// Inno value to be inserted into the iss script.
  final String value;

  /// CPU architecture represented by this value.
  final String cpu;
  const BuildArch(this.value, this.cpu);

  /// List of literal string values to be accepted as valid value for option.
  static final acceptedStringValues = ["x64", "x64_compatible"];

  /// Validate configuration option for [BuildArch].
  static String? validationError(dynamic option) {
    if (option == null) return null;
    if (option is String && acceptedStringValues.contains(option)) {
      return null;
    }
    return "inno_bundle.sign_tool attribute is invalid in pubspec.yaml.";
  }

  /// Parses configuration option to the desired [BuildArch].
  static BuildArch fromOption(String? option) {
    return option == 'x64' ? x64 : x64Compatible;
  }
}
